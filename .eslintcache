[{"/Users/divyangvijayvvargiya/Documents/upgrad/frontend/react-projects/movies-booking-app/src/index.js":"1","/Users/divyangvijayvvargiya/Documents/upgrad/frontend/react-projects/movies-booking-app/src/screens/home/Home.js":"2","/Users/divyangvijayvvargiya/Documents/upgrad/frontend/react-projects/movies-booking-app/src/common/artists.js":"3","/Users/divyangvijayvvargiya/Documents/upgrad/frontend/react-projects/movies-booking-app/src/common/header/Header.js":"4","/Users/divyangvijayvvargiya/Documents/upgrad/frontend/react-projects/movies-booking-app/src/screens/details/Details.js":"5","/Users/divyangvijayvvargiya/Documents/upgrad/frontend/react-projects/movies-booking-app/src/screens/bookshow/BookShow.js":"6","/Users/divyangvijayvvargiya/Documents/upgrad/frontend/react-projects/movies-booking-app/src/common/location.js":"7","/Users/divyangvijayvvargiya/Documents/upgrad/frontend/react-projects/movies-booking-app/src/common/language.js":"8","/Users/divyangvijayvvargiya/Documents/upgrad/frontend/react-projects/movies-booking-app/src/screens/confirmation/Confirmation.js":"9","/Users/divyangvijayvvargiya/Documents/upgrad/frontend/react-projects/movies-booking-app/src/common/coupons.js":"10","/Users/divyangvijayvvargiya/Documents/upgrad/frontend/react-projects/movies-booking-app/src/screens/Controller.js":"11","/Users/divyangvijayvvargiya/Documents/upgrad/frontend/react-projects/movies-booking-app/src/common/showTime.js":"12","/Users/divyangvijayvvargiya/Documents/upgrad/frontend/react-projects/movies-booking-app/src/common/genres.js":"13","/Users/divyangvijayvvargiya/Documents/upgrad/frontend/react-projects/movies-booking-app/src/common/movieData.js":"14","/Users/divyangvijayvvargiya/Documents/upgrad/frontend/react-projects/movies-booking-app/src/common/showDate.js":"15"},{"size":624,"mtime":1609737816001,"results":"16","hashOfConfig":"17"},{"size":12805,"mtime":1609788960025,"results":"18","hashOfConfig":"17"},{"size":9114,"mtime":1609590865991,"results":"19","hashOfConfig":"17"},{"size":14635,"mtime":1609789847594,"results":"20","hashOfConfig":"17"},{"size":7109,"mtime":1609789277490,"results":"21","hashOfConfig":"17"},{"size":12150,"mtime":1609949034787,"results":"22","hashOfConfig":"17"},{"size":309,"mtime":1609686054505,"results":"23","hashOfConfig":"17"},{"size":304,"mtime":1609685866799,"results":"24","hashOfConfig":"17"},{"size":7665,"mtime":1609705399499,"results":"25","hashOfConfig":"17"},{"size":259,"mtime":1609693675692,"results":"26","hashOfConfig":"17"},{"size":1017,"mtime":1609759382522,"results":"27","hashOfConfig":"17"},{"size":254,"mtime":1609686104812,"results":"28","hashOfConfig":"17"},{"size":191,"mtime":1609590846501,"results":"29","hashOfConfig":"17"},{"size":18784,"mtime":1609574741232,"results":"30","hashOfConfig":"17"},{"size":318,"mtime":1609686084969,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},"pnlaeg",{"filePath":"36","messages":"37","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"35"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"35"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},"/Users/divyangvijayvvargiya/Documents/upgrad/frontend/react-projects/movies-booking-app/src/index.js",["68"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport Home from \"./screens/home/Home\";\nimport 'typeface-roboto';\nimport Controller from './screens/Controller';\nimport './common/Common.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Controller/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["69","70"],"/Users/divyangvijayvvargiya/Documents/upgrad/frontend/react-projects/movies-booking-app/src/screens/home/Home.js",["71","72","73","74","75"],"import React, { Component } from 'react';\nimport './Home.css';\nimport Header from '../../common/header/Header';\nimport { withStyles } from '@material-ui/core/styles';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Input from '@material-ui/core/Input';\nimport Select from '@material-ui/core/Select';\nimport { Button, Checkbox, ListItemText, MenuItem, TextField } from '@material-ui/core';\nimport genres from '../../common/genres';\nimport artists from '../../common/artists';\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n        backgroundColor: theme.palette.background.paper\n    },\n    upcomingMoviesHeading: {\n        textAlign: 'center',\n        background: '#ff9999',\n        padding: '8px',\n        fontSize: '1rem'\n    },\n    gridListUpcomingMovies: {\n        flexWrap: 'nowrap',\n        transform: 'translateZ(0)',\n        width: '100%'\n    },\n    gridListMain: {\n        transform: 'translateZ(0)',\n        cursor: 'pointer'\n    },\n    formControl: {\n        margin: theme.spacing.unit,\n        minWidth: 280,\n        maxWidth: 280\n    },\n    title: {\n        color: theme.palette.primary.light,\n    }\n});\n\n\nclass Home extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            movieName: \"\",\n            genres: [],\n            artists: [],\n            releaseDateStart: \"\",\n            releaseDateEnd: \"\",\n            genresList: [],\n            upcomingMovies: [],\n            releasedMovies: [],\n            artistsList: []\n        }\n\n    }\n\n\n    movieNameChangeHandler = (e) => {\n        this.setState({ movieName: e.target.value })\n    }\n\n    genreSelectHandler = (e) => {\n        this.setState({ genres: e.target.value })\n    }\n    artistSelectHandler = (e) => {\n        this.setState({ artists: e.target.value })\n    }\n\n    movieClickHandler = (movieId) => {\n        // ReactDOM.render(<Details movieId = {movieId} />, document.getElementById(\"root\"))\n        this.props.history.push('/movie/' + movieId);\n    }\n\n    filterApplyHandler = () => {\n\n        let queryString = \"?status=RELEASED\";\n        if (this.state.movieName != \"\") {\n            queryString += \"&title=\" + this.state.movieName;\n        }\n\n        if (this.state.genres.length > 0) {\n            queryString += \"&genres=\" + this.state.genres.toString();\n        }\n\n        if (this.state.artists.length > 0) {\n            queryString += \"&artists=\" + this.state.artists.toString();\n        }\n        if (this.state.releaseDateStart != \"\") {\n            queryString += \"&start_date=\" + this.state.releaseDateStart.toString();\n        }\n        if (this.state.releaseDateEnd != \"\") {\n            queryString += \"&end_date=\" + this.state.releaseDateEnd.toString();\n        }\n\n        console.log(queryString);\n         \n         let that = this;\n         let dataFilter = null;\n         let xhrFilter = new XMLHttpRequest();\n         xhrFilter.addEventListener(\"readystatechange\", function () {\n             if (this.readyState === 4) {\n                 console.log(JSON.parse(this.responseText));\n                 that.setState({\n                    releasedMovies: JSON.parse(this.responseText).movies\n                });\n             }\n         });\n \n         xhrFilter.open(\"GET\", this.props.baseUrl + \"movies\" + encodeURI(queryString));\n         xhrFilter.setRequestHeader(\"Cache-Control\", \"no-cache\");\n         xhrFilter.send(dataFilter);\n    }\n    componentWillMount() {\n        let data = null;\n        let xhr = new XMLHttpRequest();\n        let that = this;\n        xhr.addEventListener(\"readystatechange\", function () {\n            if (this.readyState === 4) {\n                that.setState({ upcomingMovies: JSON.parse(this.responseText).movies })\n            }\n        });\n\n        xhr.open(\"GET\", this.props.baseUrl + \"movies?status=PUBLISHED\");\n        xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n        xhr.send(data);\n\n        //GET MOVIES\n        let dataReleased = null;\n        let xhrReleased = new XMLHttpRequest();\n        xhrReleased.addEventListener(\"readystatechange\", function () {\n            if (this.readyState === 4) {\n                console.log(JSON.parse(this.responseText));\n                that.setState({\n                    releasedMovies: JSON.parse(this.responseText).movies\n                });\n            }\n        });\n\n        xhrReleased.open(\"GET\", this.props.baseUrl + \"movies?status=RELEASED\");\n        xhrReleased.setRequestHeader(\"Cache-Control\", \"no-cache\");\n        xhrReleased.send(dataReleased);\n\n        //GET GENRES\n        let dataGenres = null;\n        let xhrGenres = new XMLHttpRequest();\n        xhrGenres.addEventListener(\"readystatechange\", function () {\n            if (this.readyState === 4) {\n                console.log(JSON.parse(this.responseText));\n                that.setState({\n                    genresList: JSON.parse(this.responseText).genres\n                });\n            }\n        });\n\n        xhrGenres.open(\"GET\", this.props.baseUrl + \"genres\");\n        xhrGenres.setRequestHeader(\"Cache-Control\", \"no-cache\");\n        xhrGenres.send(dataGenres);\n\n        let dataArtists = null;\n        let xhrArtists = new XMLHttpRequest();\n        xhrArtists.addEventListener(\"readystatechange\", function () {\n            if (this.readyState === 4) {\n                that.setState({\n                    artistsList: JSON.parse(this.responseText).artists\n                });\n            }\n        });\n\n        xhrArtists.open(\"GET\", this.props.baseUrl + \"artists\");\n        xhrArtists.setRequestHeader(\"Cache-Control\", \"no-cache\");\n        xhrArtists.send(dataArtists);\n    }\n\n    releaseDateStartHandler = (e) => {\n        this.setState({ releaseDateStart: e.target.value });\n    }\n    releaseDateEndHandler = (e) => {\n        this.setState({ releaseDateEnd: e.target.value });\n    }\n\n    render() {\n        const { classes } = this.props;\n        return (\n            <div>\n                <Header showBookShowButton=\"false\" baseUrl={this.props.baseUrl} />\n                <div className={classes.upcomingMoviesHeading}>\n                    <span>Upcoming Movies</span>\n                </div>\n                <GridList cols={5} className={classes.gridListUpcomingMovies}>{this.state.upcomingMovies.map(movie => (\n                    <GridListTile key={\"upcoming\" + movie.id} >\n                        <img src={movie.poster_url} className=\"movie-poster\" alt={movie.title} />\n                        <GridListTileBar title={movie.title} />\n                    </GridListTile>\n                ))}</GridList>\n\n                <div className=\"flex-container\">\n                    <div className=\"left\">\n                        <GridList cellHeight={350} cols={4} className={classes.gridListMain}>\n                            {this.state.releasedMovies.map(movie => (\n                                <GridListTile onClick={() => this.movieClickHandler(movie.id)} className=\"released-movie-grid-item\" key={\"grid\" + movie.id}>\n                                    <img src={movie.poster_url} className=\"movie-poster\" alt={movie.title} />\n                                    <GridListTileBar\n                                        title={movie.title}\n                                        subtitle={<span>Release Date: {new Date(movie.release_date).toDateString()}</span>}\n                                    />\n                                </GridListTile>\n                            ))}\n                        </GridList>\n                    </div>\n                    <div className=\"right\">\n                        <Card>\n                            <CardContent>\n                                <FormControl className={classes.formControl}>\n                                    <Typography className={classes.title} color=\"textSecondary\">FIND MOVIES BY:</Typography>\n                                </FormControl>\n                                <FormControl className={classes.formControl}>\n                                    <InputLabel htmlFor=\"movieName\">Movie Name</InputLabel>\n                                    <Input id=\"movieName\" onChange={this.movieNameChangeHandler} />\n                                </FormControl>\n                                <FormControl className={classes.formControl}>\n                                    <InputLabel htmlFor=\"select-multiple-checkbox\">Genre</InputLabel>\n                                    <Select\n                                        multiple\n                                        input={<Input id=\"select-multiple-checkbox-genre\" />}\n                                        renderValue={selected => selected.join(',')}\n                                        value={this.state.genres}\n                                        onChange={this.genreSelectHandler}>\n\n                                        {/* <MenuItem value=\"0\">None</MenuItem> */}\n                                        {this.state.genresList.map(genre => (\n                                            <MenuItem key={genre.id} value={genre.genre}>\n                                                <Checkbox checked={this.state.genres.indexOf(genre.genre) > -1} />\n                                                <ListItemText primary={genre.genre} />\n                                            </MenuItem>\n                                        ))}\n                                    </Select>\n                                </FormControl>\n                                <FormControl className={classes.formControl}>\n                                    <InputLabel htmlFor=\"select-multiple-checkbox\">Artists</InputLabel>\n                                    <Select\n                                        multiple\n                                        input={<Input id=\"select-multiple-checkbox\" />}\n                                        renderValue={selected => selected.join(',')}\n                                        value={this.state.artists}\n                                        onChange={this.artistSelectHandler}>\n\n                                        {/* <MenuItem value=\"0\">None</MenuItem> */}\n                                        {this.state.artistsList.map(artist => (\n                                            <MenuItem key={artist.id} value={artist.first_name + \" \" + artist.last_name}>\n                                                <Checkbox checked={this.state.artists.indexOf(artist.first_name + \" \" + artist.last_name) > -1} />\n                                                <ListItemText primary={artist.first_name + \" \" + artist.last_name} />\n                                            </MenuItem>\n                                        ))}\n                                    </Select>\n                                </FormControl>\n\n                                <FormControl className={classes.formControl}>\n                                    <TextField\n                                        id=\"releaseDateStart\"\n                                        label=\"Release Date Start\"\n                                        type=\"date\"\n                                        defaultValue=\"\"\n                                        InputLabelProps={{ shrink: true }}\n                                        onClick={this.releaseDateStartHandler} />\n                                </FormControl>\n\n                                <FormControl className={classes.formControl}>\n                                    <TextField\n                                        id=\"releaseDateEnd\"\n                                        label=\"Release Date End\"\n                                        type=\"date\"\n                                        defaultValue=\"\"\n                                        InputLabelProps={{ shrink: true }}\n                                        onClick={this.releaseDateEndHandler} />\n                                </FormControl><br /><br />\n\n                                <FormControl className={classes.formControl}>\n                                    <Button onClick={() => this.filterApplyHandler()} variant=\"contained\" color=\"primary\">\n                                        APPLY\n                                    </Button>\n                                </FormControl>\n                            </CardContent>\n                        </Card>\n\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default withStyles(styles)(Home);","/Users/divyangvijayvvargiya/Documents/upgrad/frontend/react-projects/movies-booking-app/src/common/artists.js",[],["76","77"],"/Users/divyangvijayvvargiya/Documents/upgrad/frontend/react-projects/movies-booking-app/src/common/header/Header.js",[],"/Users/divyangvijayvvargiya/Documents/upgrad/frontend/react-projects/movies-booking-app/src/screens/details/Details.js",["78"],"/Users/divyangvijayvvargiya/Documents/upgrad/frontend/react-projects/movies-booking-app/src/screens/bookshow/BookShow.js",[],"/Users/divyangvijayvvargiya/Documents/upgrad/frontend/react-projects/movies-booking-app/src/common/location.js",[],"/Users/divyangvijayvvargiya/Documents/upgrad/frontend/react-projects/movies-booking-app/src/common/language.js",[],"/Users/divyangvijayvvargiya/Documents/upgrad/frontend/react-projects/movies-booking-app/src/screens/confirmation/Confirmation.js",["79","80","81"],"import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport Header from '../../common/header/Header';\nimport './Confirmation.css';\nimport BookShow from '../../screens/bookshow/BookShow';\nimport Home from '../../screens/home/Home';\nimport coupons from '../../common/coupons';\nimport Typography from '@material-ui/core/Typography';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { withStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport green from '@material-ui/core/colors/green';\nimport { Link } from 'react-router-dom';\n\nconst styles = theme => ({\n  close: {\n    width: theme.spacing.unit * 4,\n    height: theme.spacing.unit * 4,\n  },\n  success: {\n    color: green[600],\n  }\n});\n\nclass Confirmation extends Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      open: false,\n      couponCode: \"\",\n      totalPrice: 0,\n      originalTotalPrice: 0\n    }\n  }\n\n  componentDidMount() {\n    let currentState = this.state;\n    currentState.totalPrice = currentState.originalTotalPrice = parseInt(this.props.location.bookingSummary.unitPrice, 10) * parseInt(this.props.location.bookingSummary.tickets, 10);\n    this.setState({ state: currentState });\n  }\n\n  // backToBookShowHandler = () => {\n  //   ReactDOM.render(<BookShow id={this.props.id} bookingSummary={this.props.bookingSummary} />, document.getElementById('root'));\n  // }\n\n  confirmBookingHandler = () => {\n    this.setState({ open: true });\n  }\n\n  snackBarCloseHandler = () => {\n    // ReactDOM.render(<Home />, document.getElementById('root'));\n    this.props.history.push(\"/\");\n  }\n\n  couponCodeChangeHandler = (e) => {\n    this.setState({ couponCode: e.target.value });\n  }\n\n  couponApplyHandler = () => {\n    let currentState = this.state;\n    let couponObj = coupons.filter((coupon) => {\n      return coupon.code === this.state.couponCode\n    })[0];\n\n    if (couponObj !== undefined && couponObj.value > 0) {\n      currentState.totalPrice = this.state.originalTotalPrice - ((this.state.originalTotalPrice * couponObj.value) / 100);\n      this.setState({ currentState });\n    } else {\n      currentState.totalPrice = this.state.originalTotalPrice;\n      this.setState({ currentState });\n    }\n  }\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <div className=\"Details\">\n        <Header />\n\n        <div className=\"confirmation marginTop16\">\n          <div>\n            <Link to={\"/bookshow/\" + this.props.match.params.id}>\n              <Typography className=\"back\" >\n                &#60; Back to Book Show\n                </Typography>\n            </Link><br />\n\n            <Card className=\"cardStyle\">\n              <CardContent>\n                <Typography variant=\"headline\" component=\"h2\">\n                  SUMMARY\n                </Typography>\n                <br />\n\n                <div className=\"coupon-container\">\n                  <div className=\"confirmLeft\">\n                    <Typography>Location:</Typography>\n                  </div>\n                  <div>\n                    <Typography>{this.props.location.bookingSummary.location}</Typography>\n                  </div>\n                </div>\n                <br />\n\n                <div className=\"coupon-container\">\n                  <div className=\"confirmLeft\">\n                    <Typography>Language:</Typography>\n                  </div>\n                  <div>\n                    <Typography>{this.props.location.bookingSummary.language}</Typography>\n                  </div>\n                </div>\n                <br />\n\n                <div className=\"coupon-container\">\n                  <div className=\"confirmLeft\">\n                    <Typography>Show Date:</Typography>\n                  </div>\n                  <div>\n                    <Typography>{this.props.location.bookingSummary.showDate}</Typography>\n                  </div>\n                </div>\n                <br />\n\n                <div className=\"coupon-container\">\n                  <div className=\"confirmLeft\">\n                    <Typography>Show Time:</Typography>\n                  </div>\n                  <div>\n                    <Typography>{this.props.location.bookingSummary.showTime}</Typography>\n                  </div>\n                </div>\n                <br />\n\n                <div className=\"coupon-container\">\n                  <div className=\"confirmLeft\">\n                    <Typography>Tickets:</Typography>\n                  </div>\n                  <div>\n                    <Typography>{this.props.location.bookingSummary.tickets}</Typography>\n                  </div>\n                </div>\n                <br />\n\n                <div className=\"coupon-container\">\n                  <div className=\"confirmLeft\">\n                    <Typography>Unit Price:</Typography>\n                  </div>\n                  <div>\n                    <Typography>{this.props.location.bookingSummary.unitPrice}</Typography>\n                  </div>\n                </div>\n                <br />\n\n                <div className=\"coupon-container\">\n                  <div>\n                    <FormControl className=\"formControl\">\n                      <InputLabel htmlFor=\"coupon\">\n                        <Typography>Coupon Code</Typography>\n                      </InputLabel>\n                      <Input id=\"coupon\" onChange={this.couponCodeChangeHandler} />\n                    </FormControl>\n                  </div>\n                  <div className=\"marginApply\">\n                    <Button variant=\"contained\" onClick={this.couponApplyHandler.bind(this)} color=\"primary\">Apply</Button>\n                  </div>\n                </div>\n                <br /><br />\n\n                <div className=\"coupon-container\">\n                  <div className=\"confirmLeft\">\n                    <span className=\"bold\">Total Price:</span>\n                  </div>\n                  <div>{parseInt(this.state.totalPrice, 10)}</div>\n                </div>\n                <br />\n\n                <Button variant=\"contained\" onClick={this.confirmBookingHandler} color=\"primary\">\n                  Confirm Booking\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        <Snackbar\n          anchorOrigin={{\n            vertical: 'top',\n            horizontal: 'center',\n          }}\n          className=\"snackbar\"\n          open={this.state.open}\n          onClose={this.snackBarCloseHandler}\n          message={\n            <span id=\"client-snackbar\" className={classes.success}>\n              <div className=\"confirm\"><div><CheckCircleIcon /></div><div className=\"message\"> Booking Confirmed!</div></div>\n            </span>\n          }\n          action={[\n            <IconButton\n              key=\"close\"\n              aria-label=\"Close\"\n              color=\"inherit\"\n              className={classes.close}\n              onClick={this.snackBarCloseHandler}\n            >\n              <CloseIcon />\n            </IconButton>,\n          ]}\n        />\n      </div>\n    )\n  }\n}\n\nConfirmation.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(Confirmation);","/Users/divyangvijayvvargiya/Documents/upgrad/frontend/react-projects/movies-booking-app/src/common/coupons.js",[],["82","83"],"/Users/divyangvijayvvargiya/Documents/upgrad/frontend/react-projects/movies-booking-app/src/screens/Controller.js",[],"/Users/divyangvijayvvargiya/Documents/upgrad/frontend/react-projects/movies-booking-app/src/common/showTime.js",[],"/Users/divyangvijayvvargiya/Documents/upgrad/frontend/react-projects/movies-booking-app/src/common/genres.js",[],"/Users/divyangvijayvvargiya/Documents/upgrad/frontend/react-projects/movies-booking-app/src/common/movieData.js",[],"/Users/divyangvijayvvargiya/Documents/upgrad/frontend/react-projects/movies-booking-app/src/common/showDate.js",[],{"ruleId":"84","severity":1,"message":"85","line":5,"column":8,"nodeType":"86","messageId":"87","endLine":5,"endColumn":12},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","replacedBy":"91"},{"ruleId":"84","severity":1,"message":"92","line":16,"column":8,"nodeType":"86","messageId":"87","endLine":16,"endColumn":14},{"ruleId":"84","severity":1,"message":"93","line":17,"column":8,"nodeType":"86","messageId":"87","endLine":17,"endColumn":15},{"ruleId":"94","severity":1,"message":"95","line":87,"column":34,"nodeType":"96","messageId":"97","endLine":87,"endColumn":36},{"ruleId":"94","severity":1,"message":"95","line":98,"column":41,"nodeType":"96","messageId":"97","endLine":98,"endColumn":43},{"ruleId":"94","severity":1,"message":"95","line":101,"column":39,"nodeType":"96","messageId":"97","endLine":101,"endColumn":41},{"ruleId":"88","replacedBy":"98"},{"ruleId":"90","replacedBy":"99"},{"ruleId":"84","severity":1,"message":"100","line":4,"column":8,"nodeType":"86","messageId":"87","endLine":4,"endColumn":18},{"ruleId":"84","severity":1,"message":"101","line":2,"column":8,"nodeType":"86","messageId":"87","endLine":2,"endColumn":16},{"ruleId":"84","severity":1,"message":"102","line":5,"column":8,"nodeType":"86","messageId":"87","endLine":5,"endColumn":16},{"ruleId":"84","severity":1,"message":"85","line":6,"column":8,"nodeType":"86","messageId":"87","endLine":6,"endColumn":12},{"ruleId":"88","replacedBy":"103"},{"ruleId":"90","replacedBy":"104"},"no-unused-vars","'Home' is defined but never used.","Identifier","unusedVar","no-native-reassign",["105"],"no-negated-in-lhs",["106"],"'genres' is defined but never used.","'artists' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",["105"],["106"],"'moviesData' is defined but never used.","'ReactDOM' is defined but never used.","'BookShow' is defined but never used.",["105"],["106"],"no-global-assign","no-unsafe-negation"]